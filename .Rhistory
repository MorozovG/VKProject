library("RCurl") # Библиотека для генерации запросов к API
library("jsonlite") # Библиотека для обработки JSON
library("stringr") # Библиотека для работы с текстом
url <- "https://api.vk.com/method/users.getSubscriptions?user_id="
url2 <- "https://api.vk.com/method/groups.getMembers?group_id="
id_num <- sample.int(280000000, size = 700, replace = T)
# Функция для получения id подписок для сгенерированных аккаунтов
get_id_public <- function(id) {
url_get <- str_c(url, id) # Составляем запрос к API
resp <- getURL(url_get) # Запрашиваем и получаем ответ
Sys.sleep(0.5) # Задержка для обхода ограничения на кол-во запросов в сек
# Обрабатываем ответ и получаем id подписок
fromJSON(resp)$response$groups$items
}
# Функция для получения кол-ва подписчиков паблика
get_count <- function(id) {
url_get <- str_c(url2, id)
resp <- getURL(url_get)
Sys.sleep(0.5)
fromJSON(resp)$response$count
}
# Получаем, при помощи функции get_id_public, id подписок для аккаунтов в виде list
public_id <- sapply(id_num, get_id_public)
# Преобразовываем list в data.frame
public_id <- unlist(public_id)
# Подсчитываем кол-во попаданий для каждого id полученных пабликов
public_id <- table(public_id)
# Преобразовываем в data.frame
public_id <- as.data.frame(public_id)
# Сортируем в убывающем порядке
public_id <- public_id[order(-public_id$Freq),]
# Получаем, при помощи функции get_count, кол-во подписчиков
result <- sapply(as.numeric(as.character(public_id$public_id[1:300])), get_count)
# Объединяем полученные данные о кол-ве подписчиков с id пабликов
result <- cbind(as.numeric(as.character(public_id$public_id[1:300])), result)
# Сортируем в убывающем порядке
result <- result[order(-result[,2]),]
write.csv("result.csv")
write.csv(result, "result.csv")
str(result)
colnames(result, c("Public_id", "Number_of_followers"))
colnames(result) <-  c("Public_id", "Number_of_followers")
str(result)
head(result)
write.csv(result, "result.csv")
library("RCurl") # Библиотека для генерации запросов к API
library("jsonlite") # Библиотека для обработки JSON
library("stringr") # Библиотека для работы с текстом
url <- "https://api.vk.com/method/users.getSubscriptions?user_id="
url_get <- str_c(url, 584628)
resp <- getURL(url_get) # Запрашиваем и получаем ответ
resp
url_get <- str_c(url, 58462800)
resp <- getURL(url_get) # Запрашиваем и получаем ответ
resp
url_get <- str_c(url, 9548430)
resp <- getURL(url_get) # Запрашиваем и получаем ответ
resp
url <- "https://api.vk.com/method/friends.get?user_id="
url_get <- str_c(url, 9548430)
resp <- getURL(url_get) # Запрашиваем и получаем ответ
resp
fromJSON(resp)
fromJSON(resp)$response
url <- "https://api.vk.com/method/friends.get?user_id="
id_num <- sample.int(280000000, size = 700, replace = T)
get_data <- function(id) {
url_get <- str_c(url, id)
resp <- getURL(url_get)
respdata <- c(respdata, fromJSON(resp)$response)
Sys.sleep(0.5)
respdata
}
get_number <- function(id) {
url_get <- str_c(url, id)
resp <- getURL(url_get)
Sys.sleep(0.5)
num_friend <- length(fromJSON(resp)$response)
}
temp <- sapply(id_num, get_data)
url <- "https://api.vk.com/method/friends.get?user_id="
id_num <- sample.int(280000000, size = 700, replace = T)
get_data <- function(id) {
url_get <- str_c(url, id)
resp <- getURL(url_get)
#respdata <- c(respdata, fromJSON(resp)$response)
Sys.sleep(0.5)
fromJSON(resp)$response)
}
get_number <- function(id) {
url <- "https://api.vk.com/method/friends.get?user_id="
}
url <- "https://api.vk.com/method/friends.get?user_id="
id_num <- sample.int(280000000, size = 700, replace = T)
get_data <- function(id) {
url_get <- str_c(url, id)
resp <- getURL(url_get)
#respdata <- c(respdata, fromJSON(resp)$response)
Sys.sleep(0.5)
fromJSON(resp)$response)
url <- "https://api.vk.com/method/friends.get?user_id="
id_num <- sample.int(280000000, size = 700, replace = T)
get_data <- function(id) {
url_get <- str_c(url, id)
resp <- getURL(url_get)
#respdata <- c(respdata, fromJSON(resp)$response)
Sys.sleep(0.5)
fromJSON(resp)$response
}
get_number <- function(id) {
url_get <- str_c(url, id)
resp <- getURL(url_get)
Sys.sleep(0.5)
#num_friend <- length(fromJSON(resp)$response)
length(fromJSON(resp)$response
}
url <- "https://api.vk.com/method/friends.get?user_id="
id_num <- sample.int(280000000, size = 700, replace = T)
get_data <- function(id) {
url_get <- str_c(url, id)
resp <- getURL(url_get)
#respdata <- c(respdata, fromJSON(resp)$response)
Sys.sleep(0.5)
fromJSON(resp)$response
}
get_number <- function(id) {
url_get <- str_c(url, id)
resp <- getURL(url_get)
Sys.sleep(0.5)
#num_friend <- length(fromJSON(resp)$response)
length(fromJSON(resp)$response)
}
temp <- sapply(id_num, get_data)
untemp <- unlist(temp)
num_temp <- table(untemp)
num_temp <- as.data.frame(num_temp)
num_temp1 <- num_temp[order(-num_temp$Freq),]
result <- sapply(as.numeric(as.character(num_temp1$untemp[1:300])), get_number)
result1 <- cbind(as.numeric(as.character(num_temp1$untemp[1:300])), result)
resultfin <- result1[order(-result1[,2]),]
resultfin
num_temp1
result <- data.frame(id = resultfin[,1], count_of_friends = resultfin[, 2])
result
write.csv(result, "result_friends.csv")
id_num <- sample.int(280000000, size = 10000, replace = T)
temp <- sapply(id_num, get_data)
id_num <- sample.int(280000000, size = 10000, replace = T)
temp <- sapply(id_num, get_data)
untemp <- unlist(temp)
num_temp <- table(untemp)
num_temp <- as.data.frame(num_temp)
num_temp1 <- num_temp[order(-num_temp$Freq),]
result <- sapply(as.numeric(as.character(num_temp1$untemp[1:300])), get_number)
result1 <- cbind(as.numeric(as.character(num_temp1$untemp[1:300])), result)
resultfin <- result1[order(-result1[,2]),]
resultfin
result <- data.frame(id = resultfin[,1], count_of_friends = resultfin[, 2])
write.csv(result, "result_friends_10000.csv")
library(readr)
result_1000 <- read_csv("result_friends.csv")
result_10000 <- read_csv("result_friends_10000.csv")
intersect(result_1000$id, result_10000$id)
head(result_1000)
rm(list = ls9)
rm(list = ls())
url <- "https://api.vk.com/method/users.getSubscriptions?user_id="
url2 <- "https://api.vk.com/method/users.getFollowers?user_id="
url_get <- str_c(url, 9548430)
resp <- getURL(url_get) # Запрашиваем и получаем ответ
resp
fromJSON(resp)$response$users$items
url_get <- str_c(url2, 2150)
resp <- getURL(url_get)
resp
fromJSON(resp)$response$count
id_num <- sample.int(280000000, size = 700, replace = T)
# Функция для получения id подписок для сгенерированных аккаунтов
get_id_public <- function(id) {
url_get <- str_c(url, id) # Составляем запрос к API
resp <- getURL(url_get) # Запрашиваем и получаем ответ
Sys.sleep(0.5) # Задержка для обхода ограничения на кол-во запросов в сек
# Обрабатываем ответ и получаем id подписок
fromJSON(resp)$response$users$items
}
# Функция для получения кол-ва подписчиков паблика
get_count <- function(id) {
url_get <- str_c(url2, id)
resp <- getURL(url_get)
Sys.sleep(0.5)
fromJSON(resp)$response$count
}
# Получаем, при помощи функции get_id_public, id подписок для аккаунтов в виде list
public_id <- sapply(id_num, get_id_public)
public_id <- unlist(public_id)
public_id <- table(public_id)
public_id <- as.data.frame(public_id)
# Сортируем в убывающем порядке
public_id <- public_id[order(-public_id$Freq),]
# Получаем, при помощи функции get_count, кол-во подписчиков
result <- sapply(as.numeric(as.character(public_id$public_id[1:300])), get_count)
result <- cbind(as.numeric(as.character(public_id$public_id[1:300])), result)
# Сортируем в убывающем порядке
result <- result[order(-result[,2]),]
result <- data.frame(id = result[,1], count_of_friends = result[, 2])
write.csv(result, "result_subscribers.csv")
